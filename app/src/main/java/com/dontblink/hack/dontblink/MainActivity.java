package com.dontblink.hack.dontblink;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.TextView;
import android.util.Log;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import com.google.android.glass.eye.EyeGesture;
import com.google.android.glass.eye.EyeGestureManager;
import com.google.android.glass.eye.EyeGestureManager.Listener;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;
    private CardBuilder card;
    private EyeGestureManager mEyeGestureManager;
    private EyeGestureListener mEyeGestureListener;

    // private EyeGesture target1 = EyeGesture.DON;
    // private EyeGesture target2 = EyeGesture.DOFF;
    private EyeGesture target1 = EyeGesture.BLINK;
    private EyeGesture target2 = EyeGesture.DOUBLE_BLINK;

    private TextView mTextView;
    private static final String TAG = "DontBlink";

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return buildView();
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return buildView();
            }

            @Override
            public int getPosition(Object item) {
                if (buildView().equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
        mEyeGestureManager = EyeGestureManager.from(this);
        mEyeGestureListener = new EyeGestureListener();

        // print out each eye gesture is supported or not
        for (EyeGesture eg : EyeGesture.values()) {
            boolean supported = mEyeGestureManager.isSupported(eg);
            Log.d(TAG, eg.name() + ":" + supported);
        }
    }

    @Override
    protected void onStart() {
        super.onStart();

        mEyeGestureManager.register(target1, mEyeGestureListener);
        mEyeGestureManager.register(target2, mEyeGestureListener);
    }

    @Override
    protected void onStop() {
        super.onStop();
        mEyeGestureManager.unregister(target1, mEyeGestureListener);
        mEyeGestureManager.unregister(target2, mEyeGestureListener);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        card.setText(R.string.hello_world);
        return card.getView();
    }


    private class EyeGestureListener implements Listener {

        @Override
        public void onEnableStateChange(EyeGesture eyeGesture, boolean paramBoolean) {
            Log.i(TAG, eyeGesture + " state changed:" + paramBoolean);
        }

        @Override
        public void onDetected(final EyeGesture eyeGesture) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    Log.i(TAG, eyeGesture + " is detected");
                    //mTextView.setText("Detected " + eyeGesture + "!");
                    //if (eyeGesture.equals("DOUBLE_BLINK")){
                        card.setText("YOU LOST");
                        View cardView = card.getView();
                        setContentView(cardView);
                    //}

                }
            });
        }
    }

}


