package com.dontblink.hack.dontblink;


import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.util.TypedValue;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.TextView;
import android.util.Log;
import android.os.Handler;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import com.google.android.glass.eye.EyeGesture;
import com.google.android.glass.eye.EyeGestureManager;
import com.google.android.glass.eye.EyeGestureManager.Listener;

import java.net.URISyntaxException;
import io.socket.client.IO;
import io.socket.client.Socket;


public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */

    private View mView;
    private CardBuilder card;
    private EyeGestureManager mEyeGestureManager;
    private EyeGestureListener mEyeGestureListener;

    public TextView timerView;

    // private EyeGesture target1 = EyeGesture.DON;
    // private EyeGesture target2 = EyeGesture.DOFF;
    private EyeGesture target1 = EyeGesture.BLINK;
    private EyeGesture target2 = EyeGesture.DOUBLE_BLINK;

    private TextView timerLabel;
    private static final String TAG = "DontBlink";

    // Timer variables
    private Handler mHandler;
    private int timeToStart = 5;
    private boolean gameStarted = false;

    // Socket Variables
    private Socket mSocket;
    {
        try {
            mSocket = IO.socket("http://192.168.43.253:3000");
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    private Runnable mStatusChecker = new Runnable() {
        @Override
        public void run() {
            try {
                if (timeToStart == -1) return;
                timerView = (TextView)findViewById(R.id.timer_label);
                timerView.setText(String.valueOf(timeToStart));
                timeToStart--;
                if (timeToStart == -1) {
                    mHandler.removeCallbacks(mStatusChecker);
                    timerView.setTextSize(TypedValue.COMPLEX_UNIT_SP,70);
                    timerView.setText("DON'T BLINK!");
                    gameStarted = true;
                }
            } finally {
                // 100% guarantee that this always happens, even if
                // your update method throws an exception
                mHandler.postDelayed(mStatusChecker, 1000);
            }
        }
    };


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        mHandler = new Handler();
        mSocket.connect();
        setContentView(R.layout.lobby);
//        timerView = (TextView)findViewById(R.id.timer_label);
//        timerView.setText("4");
        mEyeGestureManager = EyeGestureManager.from(this);
        mEyeGestureListener = new EyeGestureListener();

        // print out each eye gesture is supported or not
        for (EyeGesture eg : EyeGesture.values()) {
            boolean supported = mEyeGestureManager.isSupported(eg);
            Log.d(TAG, eg.name() + ":" + supported);
        }
    }

    private void startTimer() {
        timeToStart = 5;
        mStatusChecker.run();
    }

    @Override
    protected void onStart() {
        super.onStart();
        mSocket.connect();
        mEyeGestureManager.register(target1, mEyeGestureListener);
        mEyeGestureManager.register(target2, mEyeGestureListener);
        //startTimer();
    }

    @Override
    protected void onStop() {
        super.onStop();
        mSocket.disconnect();
        mEyeGestureManager.unregister(target1, mEyeGestureListener);
        mEyeGestureManager.unregister(target2, mEyeGestureListener);
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private void buildView() {
        setContentView(R.layout.timer);
    }



    private class EyeGestureListener implements Listener {

        @Override
        public void onEnableStateChange(EyeGesture eyeGesture, boolean paramBoolean) {
            Log.i(TAG, eyeGesture + " state changed:" + paramBoolean);
        }

        @Override
        public void onDetected(final EyeGesture eyeGesture) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (gameStarted) {
                        Log.i(TAG, eyeGesture + " is detected");
                        timerView.setBackgroundColor(0xfff00000);
                        timerView.setText("YOU\nLOSE!");
                    }
                }
            });
        }
    }

}


